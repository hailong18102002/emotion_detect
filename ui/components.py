import gradio as gr
from utils.image_utils import process_image
from utils.log_utils import save_current_results, get_log_data, create_satisfaction_chart

def create_shared_components():
    """T·∫°o c√°c th√†nh ph·∫ßn d√πng chung cho c·∫£ 2 tab."""
    
    def create_stats_column():
        """T·∫°o c·ªôt th·ªëng k√™."""
        with gr.Column(scale=1):
            gr.Markdown("### üìà Th·ªëng k√™ v√† Ghi nh·∫≠n")
            chart = gr.Plot(label="Th·ªëng k√™ m·ª©c ƒë·ªô h√†i l√≤ng", elem_id="chart")
            log_table = gr.DataFrame(label="L·ªãch s·ª≠ ghi nh·∫≠n (10 m·ª•c g·∫ßn nh·∫•t)", elem_id="log_table")
            refresh_button = gr.Button("L√†m m·ªõi d·ªØ li·ªáu")
            
            # Thi·∫øt l·∫≠p s·ª± ki·ªán l√†m m·ªõi
            refresh_button.click(
                get_log_data,
                outputs=log_table
            ).then(
                create_satisfaction_chart,
                outputs=chart
            )
            
            return chart, log_table
    
    return create_stats_column

def create_image_analysis_column(input_source_name):
    """T·∫°o c·ªôt ph√¢n t√≠ch ·∫£nh."""
    with gr.Column(scale=2):
        # Input
        if input_source_name == "webcam":
            image_input = gr.Image(sources="webcam", label="Webcam", elem_id=f"{input_source_name}_input")
            analyze_button = gr.Button("Ph√¢n t√≠ch ·∫£nh t·ª´ webcam")
        else:  # upload
            image_input = gr.Image(label="T·∫£i ·∫£nh l√™n", type="pil", elem_id=f"{input_source_name}_input")
            analyze_button = gr.Button("Ph√¢n t√≠ch ·∫£nh ƒë√£ t·∫£i l√™n")
        
        # Output
        image_output = gr.Image(label="K·∫øt qu·∫£ ph√¢n t√≠ch", elem_id=f"{input_source_name}_output")
        result_text = gr.Textbox(label="Chi ti·∫øt k·∫øt qu·∫£", lines=4, elem_id=f"{input_source_name}_result")
        
        # Save button
        save_button = gr.Button("L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch n√†y")
        save_status = gr.Textbox(label="Tr·∫°ng th√°i l∆∞u", elem_id=f"{input_source_name}_save_status")
        
        # Thi·∫øt l·∫≠p s·ª± ki·ªán ph√¢n t√≠ch ·∫£nh
        analyze_button.click(
            process_image,
            inputs=image_input,
            outputs=[image_output, result_text]
        )
        
        return image_input, image_output, result_text, save_button, save_status